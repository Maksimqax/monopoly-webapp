// === –ü–ê–†–ê–ú–ï–¢–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
const qs = new URLSearchParams(location.search);
const LOBBY = qs.get('lobby') || '';   // ?lobby=XXXX
const API = {
  state: (l) => `/api/lobby/state?lobby=${encodeURIComponent(l)}`, // GET
  roll:  `/api/lobby/roll`,                                        // POST {lobby}
  end:   `/api/lobby/endturn`,                                     // POST {lobby}
  sse:   (l) => `/api/events?lobby=${encodeURIComponent(l)}`,      // GET (SSE)
};

const COLORS = {
  red:    '#ff3b30',
  blue:   '#2aa8ff',
  green:  '#34c759',
  yellow: '#ffd60a',
  purple: '#a970ff',
  cyan:   '#22d3ee',
};

// === –°–ï–õ–ï–ö–¢–û–†–´ ===
const $canvas = document.getElementById('board');
const $log    = document.getElementById('log');
const $room   = document.getElementById('room');
const $turn   = document.getElementById('turnNick');
const $btnRoll= document.getElementById('btnRoll');
const $btnEnd = document.getElementById('btnEnd');

const ctx = $canvas.getContext('2d', { alpha: false });

// === –°–û–°–¢–û–Ø–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê ===
let state = {
  lobby: LOBBY,
  me: null,              // my user id (—Å –±—ç–∫–∞)
  players: [],           // [{id,nick,color,pos,cash,...}]
  turn: null,            // id –∏–≥—Ä–æ–∫–∞ —á–µ–π —Ö–æ–¥
  board: [],             // 40 –∫–ª–µ—Ç–æ–∫: [{name,type,price,rent,colorGroup}]
  dice: [0,0],
};

// === –£–¢–ò–õ–ò–¢–´ ===
const log = (txt) => {
  const el = document.createElement('div');
  el.textContent = txt;
  $log.prepend(el);
};

const POST = async (url, data) => {
  const r = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type':'application/json' },
    body: JSON.stringify(data)
  });
  if (!r.ok) throw new Error(await r.text());
  return r.json();
};

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
async function bootstrap() {
  if (!LOBBY) {
    alert('–ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?lobby=...');
    return;
  }
  $room.textContent = `–ö–æ–º–Ω–∞—Ç–∞ ‚Äî ${LOBBY}`;

  // –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  await loadState();

  // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  bindSSE();

  // –∫–Ω–æ–ø–∫–∏
  $btnRoll.onclick = onRoll;
  $btnEnd.onclick  = onEnd;

  draw();
}

async function loadState() {
  const r = await fetch(API.state(LOBBY));
  if (!r.ok) {
    const txt = await r.text();
    throw new Error(txt);
  }
  const json = await r.json();
  // –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
  // { me, turn, players:[{id,nick,color,pos}], board:[...], dice:[d1,d2] }
  state = { ...state, ...json };
  updateHeader();
  draw();
}

function updateHeader() {
  const p = state.players.find(x => x.id === state.turn);
  $turn.textContent = p ? p.nick : '‚Äî';
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
async function onRoll() {
  try {
    disableUI(true);
    const data = await POST(API.roll, { lobby: LOBBY });
    // {d1,d2,player,newPos}
    state.dice = [data.d1, data.d2];
    const pl = state.players.find(p => p.id === data.player);
    if (pl) pl.pos = data.newPos;
    log(`üé≤ –ë—Ä–æ—Å–æ–∫: ${data.d1} –∏ ${data.d2} ‚Üí ${pl?.nick || '–∏–≥—Ä–æ–∫'} –Ω–∞ ${data.newPos}`);
    draw(true);
  } catch (e) {
    console.error(e);
    alert('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞: ' + e.message);
  } finally {
    disableUI(false);
  }
}

async function onEnd() {
  try {
    disableUI(true);
    await POST(API.end, { lobby: LOBBY });
    // —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—à–ª—ë—Ç —Å–æ–±—ã—Ç–∏–µ turn/state, –º—ã –∏—Ö –ø–æ–π–º–∞–µ–º –≤ SSE
  } catch (e) {
    console.error(e);
    alert('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞: ' + e.message);
  } finally {
    disableUI(false);
  }
}

function disableUI(v) {
  const myTurn = state.turn === state.me;
  $btnRoll.disabled = v || !myTurn;
  $btnEnd.disabled  = v || !myTurn;
}

// === SSE ===
function bindSSE() {
  try {
    const es = new EventSource(API.sse(LOBBY), { withCredentials:false });
    es.onmessage = (ev) => {
      if (!ev.data) return;
      const msg = JSON.parse(ev.data);
      switch (msg.type) {
        case 'state':
          state = { ...state, ...msg.payload };
          updateHeader();
          draw();
          break;
        case 'move': {
          const { player, to, d1, d2 } = msg;
          const pl = state.players.find(p => p.id === player);
          if (pl) pl.pos = to;
          state.dice = [d1, d2];
          draw(true);
          log(`‚û°Ô∏è ${pl?.nick || '–ò–≥—Ä–æ–∫'} –ø–µ—Ä–µ—à—ë–ª –Ω–∞ ${to} (–∫—É–±–∏–∫–∏: ${d1}+${d2})`);
          break;
        }
        case 'turn':
          state.turn = msg.player;
          updateHeader();
          disableUI(false);
          break;
        case 'chat':
          log(`üí¨ ${msg.nick}: ${msg.text}`);
          break;
        case 'started':
          // –∑–∞—â–∏—â–∞–µ–º—Å—è ‚Äî –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–ø–∞–ª —Å—é–¥–∞ –∏–∑ –ª–æ–±–±–∏
          break;
      }
    };
    es.onerror = () => {
      // –æ–±—ã—á–Ω–æ Render free instance ‚Äú–∑–∞—Å—ã–ø–∞–µ—Ç‚Äù; –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–º—Å—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => bindSSE(), 1200);
    };
  } catch (e) {
    console.error(e);
  }
}

// === –†–ò–°–û–í–ê–ù–ò–ï –ü–û–õ–Ø ===

/**
 * –ü–æ–ª–µ: 40 –∫–ª–µ—Ç–æ–∫ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É.
 * –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞: 11x11 (0..10), —á–µ—Ç—ã—Ä–µ —É–≥–ª–∞ ‚Äî (0,0), (10,0), (10,10), (0,10).
 * ¬´–í–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç—å¬ª –ø—É—Å—Ç–∞—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã.
 */
function cellXY(idx) {
  // idx 0..39, –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ, 0 ‚Äî –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª (—Å—Ç–∞—Ä—Ç)
  // –†–∞—Å–∫–ª–∞–¥–∫–∞:
  // 0..10 —Å–ø—Ä–∞–≤–∞ -> –ø–æ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é
  // 10..20 –≤–≤–µ—Ä—Ö  -> –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
  // 20..30 –≤–ª–µ–≤–æ  -> –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é
  // 30..40 –≤–Ω–∏–∑   -> –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º (col,row) –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 0..10
  if (idx < 10) return [10 - idx, 10];
  if (idx === 10) return [0, 10];
  if (idx < 20) return [0, 20 - idx];
  if (idx === 20) return [0, 0];
  if (idx < 30) return [idx - 20, 0];
  if (idx === 30) return [10, 0];
  // 30..39
  return [10, idx - 30];
}

function draw(animateMove=false) {
  const W = $canvas.width;
  const H = $canvas.height;
  ctx.clearRect(0,0,W,H);

  // —Ñ–æ–Ω
  ctx.fillStyle = '#0e1621';
  ctx.fillRect(0,0,W,H);

  // –ø–æ–ª–µ-—Å–µ—Ç–∫–∞
  const CELLS = 11;
  const s = W / CELLS;

  // —Ç–æ–Ω–∫–∞—è —Ä–∞–º–∫–∞
  ctx.strokeStyle = '#1f2a39';
  ctx.lineWidth = 2;
  ctx.strokeRect(2,2,W-4,H-4);

  // –ø–æ–¥—Å–≤–µ—Ç–∏–º ¬´–¥–æ—Ä–æ–∂–∫—É¬ª –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
  ctx.fillStyle = '#0b2035';
  ctx.fillRect(s, s, W-2*s, H-2*s); // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç
  // —Å–≤–µ—Ä—Ö—É –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–π ¬´—Å—Ç–æ–ª¬ª
  ctx.fillStyle = '#0b1320';
  ctx.fillRect(s*2, s*2, W-4*s, H-4*s);

  // –∫–ª–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–º–µ—Ç—Ä)
  ctx.lineWidth = 1.5;
  for (let i=0;i<40;i++){
    const [c,r] = cellXY(i);
    const x = c*s, y = r*s;
    ctx.strokeStyle = '#213049';
    ctx.strokeRect(x,y,s,s);

    // –Ω–æ–º–µ—Ä–∞ –∫–ª–µ—Ç–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
    ctx.fillStyle = '#6b86a2';
    ctx.font = `${Math.floor(s*0.27)}px system-ui`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(String(i), x + s/2, y + s/2);
  }

  // –±—Ä–æ—Å–æ–∫
  if (state.dice?.length===2 && (state.dice[0] || state.dice[1])) {
    const txt = `üé≤ ${state.dice[0]} + ${state.dice[1]}`;
    ctx.fillStyle = '#9ec6ff';
    ctx.font = `${Math.floor(s*0.35)}px system-ui`;
    ctx.textAlign = 'left';
    ctx.fillText(txt, s*1.4, s*1.2);
  }

  // —Ñ–∏—à–∫–∏
  drawTokens(s, animateMove);
  disableUI(false);
}

function drawTokens(s, animate=false) {
  // –í –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–µ –º–æ–∂–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É–∂–∫–æ–≤-—Ñ–∏—à–µ–∫
  const R = Math.max(8, Math.floor(s*0.22));

  // —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
  const groups = new Map();
  for (const p of state.players) {
    const arr = groups.get(p.pos) || [];
    arr.push(p);
    groups.set(p.pos, arr);
  }

  for (const [pos, arr] of groups) {
    const [c,r] = cellXY(pos);
    const x0 = c*s + s/2;
    const y0 = r*s + s/2;

    // –∫—Ä—É–≥–æ–≤–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞, –µ—Å–ª–∏ —Ñ–∏—à–µ–∫ > 1
    const n = arr.length;
    for (let i=0;i<n;i++){
      const a = (i / n) * Math.PI*2;
      const rad = n>1 ? Math.min( R*1.6, s*0.28 ) : 0;
      const x = x0 + Math.cos(a)*rad;
      const y = y0 + Math.sin(a)*rad;

      ctx.beginPath();
      ctx.fillStyle = COLORS[arr[i].color] || '#fff';
      ctx.arc(x, y, R, 0, Math.PI*2);
      ctx.fill();

      // –º–∞–ª–µ–Ω—å–∫–∞—è –±–µ–ª–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –æ–±—ä—ë–º–∞
      ctx.beginPath();
      ctx.fillStyle = 'rgba(255,255,255,.75)';
      ctx.arc(x - R*0.4, y - R*0.4, Math.max(2, R*0.18), 0, Math.PI*2);
      ctx.fill();
    }
  }
}

// === –°–¢–ê–†–¢ ===
bootstrap().catch(e => {
  console.error(e);
  alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É: ' + e.message);
});
