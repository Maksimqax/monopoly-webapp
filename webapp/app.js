// ======= –±–∞–∑–æ–≤–∞—è —É—Ç–∏–ª–∏—Ç–∞ fetch =======
async function api(path, { method = 'GET', body } = {}) {
  const res = await fetch(`/api${path}`, {
    method,
    headers: body ? { 'Content-Type': 'application/json' } : undefined,
    body: body ? JSON.stringify(body) : undefined,
  });
  if (!res.ok) {
    let msg = `–û—à–∏–±–∫–∞ ${res.status}`;
    try { const j = await res.json(); if (j && j.detail) msg = j.detail; } catch {}
    throw new Error(msg);
  }
  // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
  const ct = res.headers.get('content-type') || '';
  return ct.includes('application/json') ? res.json() : null;
}

// ======= —ç–ª–µ–º–µ–Ω—Ç—ã =======
const $ = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => [...root.querySelectorAll(sel)];

const list = $('#lobbies');
const btnRefresh = $('#btnRefresh');
const btnCreate = $('#btnCreate');
const dlg = $('#createDlg');
const inName = $('#inName');
const inPwd = $('#inPwd');
const inPlayers = $('#inPlayers');
const inColor = $('#inColor');
const btnCreateGo = $('#btnCreateGo');

// ======= —Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –ª–æ–±–±–∏ =======
async function loadLobbies() {
  list.innerHTML = `<div class="meta">–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</div>`;
  try {
    const data = await api('/lobbies'); // GET /api/lobbies
    if (!Array.isArray(data) || data.length === 0) {
      list.innerHTML = `<div class="meta">–ü–æ–∫–∞ –Ω–µ—Ç –ª–æ–±–±–∏. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ.</div>`;
      return;
    }
    list.innerHTML = '';
    for (const lobby of data) {
      list.appendChild(renderLobby(lobby));
    }
  } catch (e) {
    list.innerHTML = `<div class="meta" style="color:#ff8787">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–±–±–∏: ${e.message}</div>`;
  }
}

function renderLobby(lobby) {
  const el = document.createElement('div');
  el.className = 'card';

  const left = document.createElement('div');
  left.className = 'row';
  const title = document.createElement('div');
  title.innerHTML = `<strong>${escapeHtml(lobby.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</strong> <span class="meta">#${lobby.id}</span>`;
  left.appendChild(title);

  const meta = document.createElement('div');
  const locked = lobby.password_set ? `<span class="lock">üîí –∑–∞–∫—Ä—ã—Ç–æ</span>` : '';
  meta.className = 'meta';
  meta.innerHTML = `–ò–≥—Ä–æ–∫–∏: ${lobby.players?.length || 0} / ${lobby.max_players || 4} ${locked}`;
  left.appendChild(meta);

  const right = document.createElement('div');
  right.className = 'row';
  // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" (—Ä–∞–±–æ—Ç—É JOIN –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–ª–µ–µ)
  const joinBtn = document.createElement('button');
  joinBtn.className = 'btn';
  joinBtn.textContent = lobby.password_set ? '–í–æ–π—Ç–∏ (–ø–∞—Ä–æ–ª—å)' : '–í–æ–π—Ç–∏';
  joinBtn.onclick = () => joinFlow(lobby);
  right.appendChild(joinBtn);

  el.appendChild(left);
  el.appendChild(right);
  return el;
}

function escapeHtml(s) {
  return String(s).replace(/[&<>"']/g, m => ({'&':'&amp;', '<':'&lt;', '>':'&gt;', '"':'&quot;', "'":'&#39;'}[m]));
}

// ======= —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ =======
function openCreateDialog() {
  // –ï—Å–ª–∏ <dialog> –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî –æ—Ç–∫—Ä–æ–µ–º –∫—Ä–∞—Å–∏–≤–æ
  if (dlg && dlg.showModal) {
    inName.value = '';
    inPwd.value = '';
    inPlayers.value = '4';
    inColor.value = 'red';
    dlg.showModal();
    inName.focus();
  } else {
    // Fallback: prompt
    const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–±–±–∏:');
    if (name === null) return;
    const pwd = prompt('–ü–∞—Ä–æ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, Enter –µ—Å–ª–∏ –Ω–µ—Ç):') || '';
    const max = parseInt(prompt('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (2‚Äì5):', '4'), 10) || 4;
    const color = prompt('–¶–≤–µ—Ç —Ñ–∏—à–∫–∏ (red/blue/green/yellow/purple):', 'red') || 'red';
    createLobby({ name, password: pwd, max_players: clamp(max, 2, 5), color });
  }
}

function clamp(x, a, b) { return Math.max(a, Math.min(b, x)); }

async function createLobby(payload) {
  try {
    await api('/lobbies', { method: 'POST', body: payload }); // POST /api/lobbies
    await loadLobbies();
  } catch (e) {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏: ' + e.message);
  }
}

btnCreateGo?.addEventListener('click', async (ev) => {
  ev.preventDefault();
  const name = (inName.value || '').trim();
  if (!name) { alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'); return; }
  const password = (inPwd.value || '').trim();
  const max_players = clamp(parseInt(inPlayers.value, 10) || 4, 2, 5);
  const color = inColor.value || 'red';
  dlg.close();
  await createLobby({ name, password, max_players, color });
});

// ======= join (–ø—Ä–æ—Å—Ç–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏) =======
async function joinFlow(lobby) {
  try {
    let password = '';
    if (lobby.password_set) {
      password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:') || '';
    }
    const player_name = prompt('–í–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ:', '') || '';
    if (!player_name) return;
    const color = prompt('–¶–≤–µ—Ç —Ñ–∏—à–∫–∏ (red/blue/green/yellow/purple):', 'red') || 'red';
    // POST /api/lobbies/{id}/join
    const joined = await api(`/lobbies/${encodeURIComponent(lobby.id)}/join`, {
      method: 'POST',
      body: { player_name, color, password }
    });
    alert(`–í—ã –≤ –ª–æ–±–±–∏ #${joined.id}. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —É —Å–æ–∑–¥–∞—Ç–µ–ª—è.`);
    // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å +1 –∏–≥—Ä–æ–∫–∞
    await loadLobbies();
  } catch (e) {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏: ' + e.message);
  }
}

// ======= —Å–æ–±—ã—Ç–∏—è =======
btnRefresh?.addEventListener('click', loadLobbies);
btnCreate?.addEventListener('click', openCreateDialog);

// init
loadLobbies();
